{
	"id": "700448e0-d5d2-466c-8a58-8eba1f909e87",
	"name": "CTM.QA",
	"values": [
		{
			"key": "envi",
			"value": "qa",
			"type": "default",
			"enabled": true
		},
		{
			"key": "baseUrl",
			"value": "https://qa-svcs.medicalsolutions.com/ClientPortalTravel/ClientPortalTravelAPI",
			"type": "default",
			"enabled": true
		},
		{
			"key": "oktaAuthorizeBaseUrl",
			"value": "https://secure-qa.medicalsolutions.com/oauth2/ausmyp04aZacfkuFE1d5/v1/authorize",
			"type": "default",
			"enabled": true
		},
		{
			"key": "oktaAuthenticationScript",
			"value": "function CollectOktaAuthenticationToken() {\n    let url = pm.environment.get('oktaSessionUrl');\n    let oktaUsername = pm.environment.get(\"oktaUsername\");\n    let oktaPassword = pm.environment.get(\"oktaPassword\");\n    const oktaSessionTokenRequest = {\n        url: url,\n        method: 'POST',\n        header: {\n            'Accept': '*/*',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"username\": oktaUsername,\n            \"password\": oktaPassword\n        })\n    };\n    console.log(\"1.1 Verify Okta Session Token Exists and is Valid\");\n    var getSessionToken = true;\n    var sessionExpiration = new Date(pm.environment.get('oktaSessionTokenExpiration')).getTime() / 1000.0;\n    var currentDateTime = Math.floor(new Date().getTime() / 1000.0);\n    /* Check to see if session token and expiration date exist. \n    If they exist, check to see if current token is still valid.\n    If current token is expired, collect new token. */\n    if (!pm.environment.get('oktaSessionToken') ||\n        !pm.environment.get('oktaSessionTokenExpiration')) {\n        console.log('1.2 Okta Session Token or expiration date are missing')\n    } else if (sessionExpiration <= currentDateTime) {\n        console.log(\"1.3 Okta Session Token is expired\")\n    } else {\n        getSessionToken = false;\n        console.log('1.4 Okta Session Token and expiration date are all good');\n    }\n    if (getSessionToken === true) {\n        console.log(\"2.1 Collecting Okta Session Token\");\n        pm.sendRequest(oktaSessionTokenRequest, (err, res) => {\n            console.log(err ? err : res.json());\n            if (err === null) {\n                console.log('2.2 Saving Okta session token and expiration date')\n                var responseJson = res.json();\n                pm.environment.set('oktaSessionToken', responseJson.sessionToken)\n                pm.environment.set('oktaSessionTokenExpiration', responseJson.expiresAt);\n                GetOktaAccessToken();\n            }\n        });\n    } else {\n        GetOktaAccessToken();\n    }\n}\nfunction GetOktaAccessToken() {\n    let baseUrl = pm.environment.get('oktaAuthorizeBaseUrl');\n    let sessionToken = pm.environment.get(\"oktaSessionToken\");\n    let clientId = pm.environment.get(\"oktaClientId\");\n    let redirectUri = pm.environment.get(\"oktaRedirectUri\");\n    const oktaAccessTokenRequest = {\n        url: baseUrl + '?sessionToken=' + sessionToken + '&client_id=' + clientId + '&response_type=token&redirect_uri=' + redirectUri + '&scope=openid+profile&nonce=nonce&state=state&response_mode=form_post',\n        method: 'GET'\n    };\n    console.log(\"3.1 Verify Okta Access Token Exists and is Valid\");\n    var getAccessToken = true;\n    var accessExpiration = pm.environment.get('oktaAccessTokenExpiration');\n    var currentDateTime = Math.floor(new Date().getTime() / 1000.0);\n    /* Check to see if session token and expiration date exist. \n       If they exist, check to see if current token is still valid.\n       If current token is expired, collect new token. */\n    if (!pm.environment.get('oktaAccessToken') ||\n        !pm.environment.get('oktaAccessTokenExpiration')) {\n        console.log('3.2 Okta Access Token or expiration date are missing')\n    } else if (accessExpiration <= currentDateTime) {\n        console.log(\"3.3 Okta Access Token is expired\")\n    } else {\n        getAccessToken = false;\n        console.log('3.4 Okta Access Token and expiration date are all good');\n    }\n    if (getAccessToken === true) {\n        pm.sendRequest(oktaAccessTokenRequest, (err, res) => {\n            //console.log(err ? err : res.json());\n            console.log(\"4.1 Collecting Okta Access Token\");\n            //console.log(res.text());\n            if (err === null) {\n                console.log('4.2 Saving Okta access token and expiration date')\n                // Load the HTML response to $\n                const $ = cheerio.load(res.text());\n                console.log($);\n                // Use the jQuery selector API to get different elements on the page\n                var accessToken = ($(\"input[name='access_token']\").val());\n                var expiresIn =  ($(\"input[name='expires_in']\").val());\n                console.log(\"Token \" + accessToken);\n                console.log(\"Current dateTime \" + currentDateTime);\n                console.log(\"Access expiration \" + (parseInt(currentDateTime) + parseInt(expiresIn)))\n                pm.environment.set(\"oktaAccessToken\", accessToken);\n                pm.environment.set('oktaAccessTokenExpiration', (parseInt(currentDateTime) + parseInt(expiresIn)));\n            }\n        })\n    } \n}\nCollectOktaAuthenticationToken();",
			"type": "default",
			"enabled": true
		},
		{
			"key": "oktaClientId",
			"value": "0oa26v0i1pL1gC6cx1d6",
			"type": "default",
			"enabled": true
		},
		{
			"key": "oktaUsername",
			"value": "cltadmin@cptrvl.com",
			"type": "default",
			"enabled": true
		},
		{
			"key": "oktaPassword",
			"value": "Tester123!",
			"type": "default",
			"enabled": true
		},
		{
			"key": "oktaSessionUrl",
			"value": "https://medicalsolutions.oktapreview.com/api/v1/authn",
			"type": "default",
			"enabled": true
		},
		{
			"key": "oktaRedirectUri",
			"value": "https://clientportaltravel-qa.medicalsolutions.com/implicit/callback",
			"type": "default",
			"enabled": true
		},
		{
			"key": "oktaSessionToken",
			"value": "20111fjktEIvbk4IT94zFwd_Q9SkBj2YTAtM90bBqvQF99tPpS7Xqeu",
			"type": "any",
			"enabled": true
		},
		{
			"key": "oktaSessionTokenExpiration",
			"value": "2023-08-25T09:53:49.000Z",
			"type": "any",
			"enabled": true
		},
		{
			"key": "oktaAccessToken",
			"value": "eyJraWQiOiJXcWc4eHNzZTZzX1htVDRISlpfUzNtVXpFU2dZWThFc29pdURJd1pxc0ZFIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULnNaRmpUYU1TRnE3V2s2V3hncklzbjVmYW1MdTVCZEdMQzRpeXJtdlFoNnMiLCJpc3MiOiJodHRwczovL3NlY3VyZS1xYS5tZWRpY2Fsc29sdXRpb25zLmNvbS9vYXV0aDIvYXVzbXlwMDRhWmFjZmt1RkUxZDUiLCJhdWQiOiJhcGk6Ly9kZWZhdWx0IiwiaWF0IjoxNjkyOTU2OTY4LCJleHAiOjE2OTI5NjA1NjgsImNpZCI6IjBvYTE2bTRuaThFR2lVZWhXMWQ3IiwidWlkIjoiMDB1MTh2YTJxYzNZRkVsT28xZDciLCJzY3AiOlsib3BlbmlkIiwicHJvZmlsZSJdLCJhdXRoX3RpbWUiOjE2OTI5NTY4MjEsImxhc3RGYWN0b3JWZXJpZmljYXRpb24iOiIiLCJzdWIiOiJkYW4ucGxhZ2dlQG1lZGljYWxzb2x1dGlvbnMuY29tIiwibWZhQWN0aXZlIjoiIiwicm9sZXMiOlsiQ2xpZW50IFBvcnRhbCBUcmF2ZWwgUm9sZTogQWRtaW4iLCJFdmVyeW9uZSIsIkNsaWVudCBQb3J0YWwgVHJhdmVsIFVzZXIgVHlwZTogQ2xpZW50IEFkbWluIiwiQ2xpZW50IFBvcnRhbCBUcmF2ZWwgR2VuZXJpYyBVc2VyIFR5cGUiLCJDbGllbnQgUG9ydGFsIFBSTiBVc2VyIFR5cGU6IFN5c3RlbV9hZG1pbiIsIkNsaWVudCBQb3J0YWwgUFJOIEdlbmVyaWMgVXNlciBUeXBlIl0sInNvdXJjZWFwcGlkIjoiMG9hMTZtNG5pOEVHaVVlaFcxZDcifQ.SXtJvBQaO5ueHAJ6u2YXebUNPrzy_pxy0fBoR37TGE5MGPLO9eRnI2Jhj14BYus_kdZL599JtNBphF_BqI5cRzWsM3RwQc6OCXWgs_laKVb4keBBLyZBrLLAq8wF7lDjnKFG1xN0dybWdPVVp9m_Ujg2az6NawdUTl7fFAFp11vGvX5qDCzIZbrZRNuMnUoWxGMNlr2i9uRLkL0RM8c7s8b9ZzMwd26zodOgJ3XkL26VvbY5LohsGM19ZaqBZ8vVlMSgaTivwtNCccOTIo7eOtU5WHu8eSqZigG1B1SOC8n505l-P6ysOMLfnPK8IiHC9HKV4AAKBSo8SOfi-B3dfQ",
			"type": "any",
			"enabled": true
		},
		{
			"key": "oktaAccessTokenExpiration",
			"value": 1692960564,
			"type": "any",
			"enabled": true
		},
		{
			"key": "timestamp",
			"value": "",
			"type": "any",
			"enabled": true
		},
		{
			"key": "cxaAdminToken",
			"value": "",
			"type": "default",
			"enabled": true
		}
	],
	"_postman_variable_scope": "environment",
	"_postman_exported_at": "2023-12-20T08:28:06.149Z",
	"_postman_exported_using": "Postman/10.21.7"
}